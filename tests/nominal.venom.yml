name: Test suite 
version: "2"
testcases:
  - name: Nominal case
    steps:
      - type: http
        method: POST
        url: "{{.server_http}}/history/clean"
        headers:
          Content-Type: application/json
        assertions:
          - result.statuscode ShouldEqual 200
      - type: http
        method: POST
        url: "{{.server_http}}/upload-proto"
        headers:
          Content-Type: application/json
        body: >
          {
            "filename": "hello.proto",
            "content": "syntax=\"proto3\"; package example; message HelloRequest{string name=1;} message HelloReply{string message=1;} service Greeter{rpc SayHello(HelloRequest) returns(HelloReply);}"
          }
        assertions:
          - result.statuscode ShouldEqual 201
      - type: http
        method: POST
        url: "{{.server_http}}/mocks"
        headers:
          Content-Type: application/json
        body: >
          {
            "service":"example.Greeter",
            "method":"SayHello",
            "responseType":"example.HelloReply",
            "mockResponse": {"message":"Bonjour Alice"},
            "grpcStatus":0,
            "headers": {"custom":"value"},
            "delayMs": 0
          }
        assertions:
          - result.statuscode ShouldEqual 201
      - type: grpc
        url: "{{.server_grpc}}"
        data:
          name: Alice
        service: example.Greeter
        method: SayHello
        assertions:
        - result.code ShouldEqual 0
        - result.systemoutjson.message ShouldEqual Bonjour Alice
      - type: http
        method: GET
        url: "{{.server_http}}/history"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldHaveLength 2

          - result.bodyjson.bodyjson1.full_method ShouldEqual "/example.Greeter/SayHello"

          - result.bodyjson.bodyjson1.messages ShouldHaveLength 2

          - result.bodyjson.bodyjson1.messages.messages0.direction ShouldEqual "recv"
          - result.bodyjson.bodyjson1.messages.messages0.recognized ShouldBeTrue
          - result.bodyjson.bodyjson1.messages.messages0.payload.name ShouldEqual "Alice"
          - result.bodyjson.bodyjson1.messages.messages0.payload_string ShouldContainSubstring '"name":"Alice"'
          - result.bodyjson.bodyjson1.messages.messages0.proxified ShouldBeFalse

          - result.bodyjson.bodyjson1.messages.messages1.direction ShouldEqual "send"
          - result.bodyjson.bodyjson1.messages.messages1.recognized ShouldBeTrue
          - result.bodyjson.bodyjson1.messages.messages1.payload.message ShouldEqual "Bonjour Alice"
          - result.bodyjson.bodyjson1.messages.messages1.payload_string ShouldContainSubstring '"message":"Bonjour Alice"'
          - result.bodyjson.bodyjson1.messages.messages1.proxified ShouldBeFalse

          - result.bodyjson.bodyjson1.state ShouldEqual "CLOSED"